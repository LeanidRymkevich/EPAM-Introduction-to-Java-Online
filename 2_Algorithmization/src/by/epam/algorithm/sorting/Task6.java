package by.epam.javaonline.algorithm.sorting;

import java.util.Arrays;

/* Сортировка Шелла. Дан массив n действительных чисел. Требуется упорядочить его по возрастанию. 
 * Делается это следующим образом: сравниваются два соседних элемента a(i) и a(i+1).
 * Если a(i) <= a(i+1) , то продвигаются на один элемент вперед. Если a(i) > a(i+1),
 * то производится перестановка и сдвигаются на один элемент назад. 
 * Составить алгоритм этой сортировки
*/

public class Task6 {

	public static void main(String[] args) {
		
		int[] a = { 13, 11, 21, 16, 23, 12, 14, 9, 37, 10, 33 };

		System.out.printf("Исходный массив a[%d] = %s.\n", a.length, Arrays.toString(a));
		
		// есть разные способы вычисления шага согласно людям которые их придумали:
		// Шелл, Седжевик, Хиббард, Прат, Кнут. Здесь использован шаг Шелла, поэтому
		// и называется сортировкой Шелла. Сортировка Шелла быстрее обычной вставками,
		// но самая медленная из 5 вышеупомянутых, остальные примерно одинаковы, из них
		// наилучшие результаты на больших массивах показывает шаг Кнута
		
		// на каждой итерации уменьшаем шаг в 2-е, в пределе до 1 включительно
		// при шаге 1 сортировка превращается в обычную вставками
		
		for (int step = a.length / 2; step> 0; step /=2) { 
			
			for(int i = step; i< a.length; i++) { // смещаем каждую итерацию начало просмотра на 1 вправо
				
				for (int j = i; j >= step; j -= step) { // сравниваем предыдущее через шаг значение с текущим
					
					if(a[j] < a[j - step]) {
						
						int temp = a[j];
						a[j] = a[j - step];
						a[j - step] = temp;
						
					} else {
						break;
					}
				}
			}
		}
		System.out.printf("Отсортированный массив a[%d] = %s.\n", a.length, Arrays.toString(a));
	}

}
